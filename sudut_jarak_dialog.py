# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SudutJarakDialog
                                 A QGIS plugin
 Penggambaran sudut dan jarak
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-10-20
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Kelompok12
        email                : hasniarrafi.yazida@mail.ugm.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import math
import sys

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsVectorLayer, QgsProject, QgsFeature, QgsGeometry, QgsPointXY, QgsPoint, Qgis
from qgis.utils import iface


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'sudut_jarak_dialog_base.ui'))


class SudutJarakDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(SudutJarakDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        # definisi antarmuka
        self.iface = iface
        
        # menghubungkan tombol Plot! dengan suuatu method
        self.plot.clicked.connect(self.gambar_plot)
        
    def gambar_plot(self):
        """ Lakukan sesuatu dari Line Edit pada kolom X """
        # Mendefinisikan dan mengonversi data masukan
        
        x = float(self.input_x.text())
        y = float(self.input_y.text())

        az = float(self.input_az.text())
        d = float(self.input_jarak.text())
        
        x2 = x + (d*math.sin(math.radians(az)))
        y2 = y + (d*math.cos(math.radians(az)))   

        # Membuat exception untuk menangkap error
        
        try:            
            if x>y:
                self.buat_titik(x,y)
                raise Exception(iface.messageBar().pushMessage("Error", "Pastikan nilai input koordinat awal telah benar!", level=Qgis.Critical))    
            if az>360:
                self.buat_titik(x,y)
                self.buat_titik2(x2,y2)                
                raise Exception(iface.messageBar().pushMessage("Warning", "Azimuth lebih besar dari 360!", level=Qgis.Warning))
            if az<0:
                self.buat_titik(x,y)
                self.buat_titik2(x2,y2)
                raise Exception(iface.messageBar().pushMessage("Warning", "Azimuth harus bernilai positif!", level=Qgis.Warning))
            if d>13500:
                self.buat_titik(x,y)
                raise Exception(iface.messageBar().pushMessage("Error", "Jarak input melebihi batas kelengkungan bumi! Rumus yang digunakan tidak sesuai", level=Qgis.Critical))
            if d<0:
                self.buat_titik(x,y)
                raise Exception(iface.messageBar().pushMessage("Error", "Jarak harus bernilai positif!", level=Qgis.Critical))
        except Exception as e: 
            print (e)
 
        # Menampilkan titik awal dan titik akhir         
        else:
            self.buat_titik(x,y)
            self.buat_titik2(x2,y2)            
 
        # Memberikan pilihan perulangan program  
        
        if self.perulangan.isChecked():
            self.input_x.setText(str(x2))
            self.input_y.setText(str(y2))
            self.input_az.setText('')
            self.input_jarak.setText('') 
           
        # Memberikan pilihan penggambaran garis secara otomatis 
        
        if self.plot_garis.isChecked():
            self.buat_garis(x,y,x2,y2)       
             
    def buat_titik (self, x, y):
        """ buat titik di koordinat masukan """

        # Mendefinisikan CRS yang dipakai
        
        crs = str(self.crs.currentText())
        crs_titik = "Point?crs="+crs
        
        # Membuat layer baru untuk titik awal 
        
        layer = QgsVectorLayer(crs_titik, "Titik awal", "memory")
        QgsProject.instance().addMapLayer(layer)
        
        # Menambahkan geometri berupa titik awal plot pada fitur
        
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x, y)))
        
        # Menambahkan fitur titik awal ke layer
        
        layer.dataProvider().addFeatures([feature])
        layer.updateExtents()
        
        # Melakukan zoom otomatis ke titik awal hasil plot
        iface.actionZoomToLayer().trigger()


    # Mendefinisikan fungsi pembuatan titik hasil plot atau titik akhir    
    def buat_titik2 (self,x2,y2):

        # Mendefinisikan CRS yang dipakai
        
        crs = str(self.crs.currentText())
        crs_terikat = "Point?crs="+crs
        
        # Membuat layer baru untuk titik akhir
        
        layer = QgsVectorLayer(crs_terikat, "Titik akhir", "memory")
        QgsProject.instance().addMapLayer(layer)

        # Menambahkan geometri berupa titik akhir plot pada fitur
        
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x2, y2)))

        # Menambahkan fitur titik akhir ke layer
        
        layer.dataProvider().addFeatures([feature])
        layer.updateExtents()

        # Melakukan zoom otomatis ke titik akhir hasil plot        
        iface.actionZoomToLayer().trigger()

    # Mendefinisikan fungsi pembuatan garis hasil plot atau titik akhir    
    def buat_garis(self,x, y, x2, y2):
        
        # Mendefinisikan CRS yang dipakai
        
        crs = str(self.crs.currentText())
        crs_line = "LineString?crs="+crs

        # Mendefinisikan awal dan akhir garis hasil plot
        line_start = QgsPoint(x,y)
        line_end = QgsPoint(x2 , y2)        
        
        #Membuat layer baru garis hasil plot
        
        layer_garis = QgsVectorLayer(crs_line, "Plot garis", "memory")
        QgsProject.instance().addMapLayer(layer_garis)

        # Menambahkan geometri berupa garis akhir plot p                                                                                NNNNNNNNNNNNNNN NM   MMMMMMMMMMMMMMMM Mada fitur         
        feature_garis = QgsFeature()
        feature_garis.setGeometry(QgsGeometry.fromPolyline([line_start,line_end]))
        
        # Menambahkan fitur layer akhir ke layer
        layer_garis.dataProvider().addFeatures([feature_garis])
        layer_garis.updateExtents()
        
        # Melakukan zoom otomatis ke garis hasil plot
        iface.actionZoomToLayer().trigger()